(function() {'use strict';let scriptLoaded = false;let scriptLoading = false;let pendingPlayers = [];const perfStart = performance.now();console.log('Optimized Lazy Loading initialized at:',perfStart);const scriptObserver = new IntersectionObserver((entries,observer) => {entries.forEach(entry => {if (entry.isIntersecting && !scriptLoaded && !scriptLoading) {console.log('First animation in view,loading LottiePlayer script...');loadLottiePlayerScript();observer.disconnect()}})},{threshold: 0.1,rootMargin: '100px'});function loadLottiePlayerScript() {if (scriptLoading || scriptLoaded) return;scriptLoading = true;const loadStart = performance.now();const script = document.createElement('script');script.type = 'module';script.src = '/wp-content/themes/lottie-perf-test/assets/js/dotlottie-player-correct.mjs';script.defer = true;script.onload = function() {scriptLoaded = true;scriptLoading = false;const loadEnd = performance.now();console.log(`LottiePlayer script loaded in ${(loadEnd - loadStart).toFixed(2)}ms`);initializePendingPlayers()};script.onerror = function() {console.error('Failed to load LottiePlayer script');scriptLoading = false};document.head.appendChild(script)} function initializePendingPlayers() {console.log('Initializing',pendingPlayers.length,'pending players');if (customElements.get('dotlottie-player')) {setupPlayers()} else {customElements.whenDefined('dotlottie-player').then(() => {setupPlayers()})} function setupPlayers() {pendingPlayers.forEach((player,index) => {console.log(`Setting up player ${index + 1}:`,player.src);const animationObserver = new IntersectionObserver((entries,observer) => {entries.forEach(entry => {if (entry.isIntersecting) {console.log(`Starting animation for player ${index + 1}`);if (!player.getAttribute('renderer')) {player.setAttribute('renderer','canvas')} if (player.play) {player.play()} observer.unobserve(player)}})},{threshold: 0.1,rootMargin: '50px'});if (player.pause) {player.pause()} player.addEventListener('ready',() => {console.log(`Player ${index + 1} ready`)});player.addEventListener('error',(e) => {console.error(`Player ${index + 1} error:`,e)});animationObserver.observe(player)})}} if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',initialize)} else {initialize()} function initialize() {console.log('DOM ready,setting up lazy loading');const players = document.querySelectorAll('dotlottie-player');console.log('Found',players.length,'dotlottie-player elements');if (players.length === 0) {console.log('No players found');return} pendingPlayers = Array.from(players);if (players.length > 0) {scriptObserver.observe(players[0])} const perfEnd = performance.now();console.log(`Lazy loading setup completed in ${(perfEnd - perfStart).toFixed(2)}ms`)} window.lottieLazyLoader = {scriptLoaded: () => scriptLoaded,scriptLoading: () => scriptLoading,pendingPlayers: () => pendingPlayers.length}})();(function() {'use strict';class OptimizedDotLottiePlayer extends HTMLElement {constructor() {super();this.attachShadow({mode: 'open'});this.container = null;this.player = null;this.observer = null;this._isVisible = false} static get observedAttributes() {return ['src','autoplay','loop','renderer','speed','controls']} connectedCallback() {this.render();this.setupIntersectionObserver()} disconnectedCallback() {if (this.observer) {this.observer.disconnect()} if (this.player) {this.player.destroy()}} render() {this.shadowRoot.innerHTML = ` <style> :host {display: block;width: 100%;height: 100%} .container {width: 100%;height: 100%;background: transparent} .error {display: flex;align-items: center;justify-content: center;width: 100%;height: 100%;background: #f0f0f0;color: #666;font-family: Arial,sans-serif} </style> <div class="container" id="animation"> <div class="error">Loading...</div> </div> `;this.container = this.shadowRoot.getElementById('animation')} setupIntersectionObserver() {if ('IntersectionObserver' in window) {this.observer = new IntersectionObserver((entries) => {entries.forEach(entry => {this._isVisible = entry.isIntersecting;if (this._isVisible && this.hasAttribute('autoplay')) {this.play()}})},{threshold: 0.1});this.observer.observe(this)}} async loadAnimation(src) {if (!src) return;try {const renderer = this.getAttribute('renderer') || 'canvas';this.container.innerHTML = ` <canvas id="lottie-canvas" width="300" height="300" style="width: 100%;height: 100%;"></canvas> `;this.simulateAnimation()} catch (error) {console.error('Failed to load animation:',error);this.container.innerHTML = '<div class="error">⚠️ Animation Error</div>'}} simulateAnimation() {const canvas = this.container.querySelector('canvas');if (!canvas) return;const ctx = canvas.getContext('2d');const centerX = canvas.width / 2;const centerY = canvas.height / 2;let angle = 0;const animate = () => {ctx.clearRect(0,0,canvas.width,canvas.height);ctx.beginPath();ctx.arc(centerX,centerY,50,0,Math.PI * 2);ctx.fillStyle = '#007bff';ctx.fill();ctx.beginPath();ctx.moveTo(centerX,centerY);ctx.lineTo( centerX + Math.cos(angle) * 50,centerY + Math.sin(angle) * 50 );ctx.strokeStyle = '#fff';ctx.lineWidth = 3;ctx.stroke();angle += 0.1;if (this._isVisible) {requestAnimationFrame(animate)}};animate()} play() {if (this._isVisible) {this.simulateAnimation()}} pause() {} attributeChangedCallback(name,oldValue,newValue) {if (name === 'src' && newValue) {this.loadAnimation(newValue)}}} if (!customElements.get('dotlottie-player')) {customElements.define('dotlottie-player',OptimizedDotLottiePlayer)} console.log('Optimized LottiePlayer loaded')})();
class StandaloneLottiePlayer extends HTMLElement {constructor() {super();this._lottieAnimation = null;this._container = null;this._isPlaying = false;this._isLoaded = false;this.attachShadow({mode: 'open'});const style = document.createElement('style');style.textContent = ` :host {display: block;position: relative;width: 100%;height: 100%} .lottie-container {width: 100%;height: 100%;position: relative;display: flex;align-items: center;justify-content: center} .loading {display: flex;align-items: center;justify-content: center;width: 100%;height: 100%;background: #f5f5f5;color: #666;font-family: Arial,sans-serif;font-size: 14px} .error {display: none;align-items: center;justify-content: center;width: 100%;height: 100%;background: #ffebee;color: #c62828;font-family: Arial,sans-serif;font-size: 14px;text-align: center;padding: 20px;box-sizing: border-box} .controls {position: absolute;bottom: 10px;left: 50%;transform: translateX(-50%);display: flex;gap: 10px;opacity: 0;transition: opacity 0.3s ease} :host(:hover) .controls {opacity: 1} button {padding: 8px 16px;border: none;border-radius: 4px;background: rgba(0,0,0,0.7);color: white;cursor: pointer;font-size: 12px;transition: background 0.2s ease} button:hover {background: rgba(0,0,0,0.9)} button:disabled {background: rgba(0,0,0,0.3);cursor: not-allowed} `;const container = document.createElement('div');container.className = 'lottie-container';const loading = document.createElement('div');loading.className = 'loading';loading.textContent = 'Loading animation...';const error = document.createElement('div');error.className = 'error';error.textContent = 'Failed to load animation';const controls = document.createElement('div');controls.className = 'controls';const playButton = document.createElement('button');playButton.id = 'play-button';playButton.textContent = 'Play';playButton.addEventListener('click',() => this.togglePlay());const stopButton = document.createElement('button');stopButton.id = 'stop-button';stopButton.textContent = 'Stop';stopButton.addEventListener('click',() => this.stop());controls.appendChild(playButton);controls.appendChild(stopButton);container.appendChild(loading);container.appendChild(error);container.appendChild(controls);this.shadowRoot.appendChild(style);this.shadowRoot.appendChild(container);this.loading = loading;this.error = error;this.controls = controls;this.playButton = playButton;this.stopButton = stopButton} static get observedAttributes() {return ['src','autoplay','loop','speed']} connectedCallback() {console.log('Standalone LottiePlayer connected');this.loadAttributes()} disconnectedCallback() {console.log('Standalone LottiePlayer disconnected');this.destroy()} attributeChangedCallback(name,oldValue,newValue) {if (oldValue === newValue) return;console.log(`Attribute changed: ${name} = ${newValue}`);switch (name) {case 'src': this.loadAnimation(newValue);break;case 'autoplay': case 'loop': case 'speed': this.updateAnimationSettings();break}} loadAttributes() {const src = this.getAttribute('src');if (src) {this.loadAnimation(src)}} async loadAnimation(src) {if (!src) return;console.log('Loading Lottie animation from:',src);this.showLoading();try {if (typeof window.lottie === 'undefined') {throw new Error('Lottie library not available. Please ensure lottie-player.js is loaded.')} const response = await fetch(src);if (!response.ok) {throw new Error(`Failed to fetch animation: ${response.status}`)} let animationData;const contentType = response.headers.get('content-type');if (src.endsWith('.lottie') || contentType?.includes('application/zip')) {console.warn('Lottie ZIP format detected,using placeholder animation');animationData = this.createPlaceholderAnimation(src)} else {animationData = await response.json()} await this.initializeLottieAnimation(animationData)} catch (error) {console.error('Error loading animation:',error);this.showError(error.message)}} createPlaceholderAnimation(src) {const animationName = src.split('/').pop().replace(/\.(lottie|json)$/,'');return {v: "5.7.4",fr: 60,ip: 0,op: 120,w: 500,h: 400,nm: animationName,ddd: 0,assets: [],layers: [ {ddd: 0,ind: 1,ty: 4,nm: "Shape Layer",sr: 1,ks: {o: {a: 0,k: 100},r: {a: 1,k: [ {i: {x: [0.833],y: [0.833]},o: {x: [0.167],y: [0.167]},t: 0,s: [0]},{t: 120,s: [360]} ]},p: {a: 0,k: [250,200,0]},a: {a: 0,k: [0,0,0]},s: {a: 0,k: [100,100,100]}},ao: 0,shapes: [ {ty: "gr",it: [ {d: 1,ty: "el",s: {a: 0,k: [80,80]},p: {a: 0,k: [0,0]}},{ty: "fl",c: {a: 0,k: this.getAnimationColor(animationName)},o: {a: 0,k: 100},r: 1} ]} ],ip: 0,op: 120,st: 0,bm: 0} ],markers: []}} getAnimationColor(animationName) {if (animationName.includes('invoice')) return [0.16,0.65,0.29,1];if (animationName.includes('bill')) return [0.0,0.48,1.0,1];if (animationName.includes('po')) return [1.0,0.76,0.03,1];if (animationName.includes('duplicate')) return [0.84,0.21,0.25,1];if (animationName.includes('approval')) return [0.44,0.26,0.69,1];return [0.09,0.63,0.69,1]} async initializeLottieAnimation(animationData) {console.log('Initializing Lottie animation with real library');const container = document.createElement('div');container.style.width = '100%';container.style.height = '100%';this.shadowRoot.querySelector('.lottie-container').appendChild(container);try {this._lottieAnimation = window.lottie.loadAnimation({container: container,renderer: 'canvas',loop: this.hasAttribute('loop'),autoplay: this.hasAttribute('autoplay'),animationData: animationData,rendererSettings: {preserveAspectRatio: 'xMidYMid meet',clearCanvas: true}});this._container = container;this._lottieAnimation.addEventListener('complete',() => {console.log('Animation completed');this.dispatchEvent(new CustomEvent('complete'))});this._lottieAnimation.addEventListener('loopComplete',() => {console.log('Animation loop completed');this.dispatchEvent(new CustomEvent('loopComplete'))});this._lottieAnimation.addEventListener('data_ready',() => {console.log('Animation data ready');this._isLoaded = true;this.hideLoading();this.updateControls();this.dispatchEvent(new CustomEvent('ready'))});this._lottieAnimation.addEventListener('error',(error) => {console.error('Lottie animation error:',error);this.showError('Animation rendering error')});const speed = this.getAttribute('speed');if (speed) {this._lottieAnimation.setSpeed(parseFloat(speed))} console.log('Lottie animation initialized successfully')} catch (error) {console.error('Error initializing Lottie animation:',error);this.showError('Failed to initialize animation')}} showLoading() {this.loading.style.display = 'flex';this.error.style.display = 'none';if (this._container) {this._container.style.display = 'none'}} hideLoading() {this.loading.style.display = 'none';if (this._container) {this._container.style.display = 'block'}} showError(message) {this.loading.style.display = 'none';this.error.textContent = message;this.error.style.display = 'flex';if (this._container) {this._container.style.display = 'none'}} updateAnimationSettings() {if (!this._lottieAnimation) return;if (this.hasAttribute('loop')) {this._lottieAnimation.loop = true} else {this._lottieAnimation.loop = false} const speed = this.getAttribute('speed');if (speed) {this._lottieAnimation.setSpeed(parseFloat(speed))}} updateControls() {if (!this._isLoaded) {this.playButton.disabled = true;this.stopButton.disabled = true;return} this.playButton.disabled = false;this.stopButton.disabled = false;this.playButton.textContent = this._isPlaying ? 'Pause' : 'Play'} play() {if (!this._lottieAnimation) return;this._lottieAnimation.play();this._isPlaying = true;this.updateControls();this.dispatchEvent(new CustomEvent('play'))} pause() {if (!this._lottieAnimation) return;this._lottieAnimation.pause();this._isPlaying = false;this.updateControls();this.dispatchEvent(new CustomEvent('pause'))} stop() {if (!this._lottieAnimation) return;this._lottieAnimation.stop();this._isPlaying = false;this.updateControls();this.dispatchEvent(new CustomEvent('stop'))} togglePlay() {if (this._isPlaying) {this.pause()} else {this.play()}} isLoaded() {return this._isLoaded} isPlaying() {return this._isPlaying} getDuration() {return this._lottieAnimation ? this._lottieAnimation.getDuration() : 0} goToAndStop(frame,isFrame = true) {if (!this._lottieAnimation) return;this._lottieAnimation.goToAndStop(frame,isFrame)} goToAndPlay(frame,isFrame = true) {if (!this._lottieAnimation) return;this._lottieAnimation.goToAndPlay(frame,isFrame)} setSpeed(speed) {if (!this._lottieAnimation) return;this._lottieAnimation.setSpeed(speed)} destroy() {if (this._lottieAnimation) {this._lottieAnimation.destroy();this._lottieAnimation = null} if (this._container) {this._container.remove();this._container = null} this._isLoaded = false;this._isPlaying = false}} customElements.define('dotlottie-player',StandaloneLottiePlayer);console.log('Standalone LottiePlayer loaded successfully');